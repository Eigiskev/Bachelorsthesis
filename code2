from sklearn.metrics import pairwise_distances
import pandas as pd
import numpy as np
import time
import math
import matplotlib.pyplot as plt
from scipy import stats
import torchvision.datasets as datasets
from torchvision import transforms
from PIL import Image

#save the pairwise distances somewhere so i dont have to calculate them for every run
def getOGdis(dataset):
  return pairwise_distances(dataset, metric='euclidean')

def writeToFile(data, filename):
    np.savetxt(filename, data, delimiter=',')


def minDimCalc(eps, delta, N):
    return np.ceil(4/(eps**2) * np.log(N/delta))

def getProjMat(dim, N):
    return np.random.choice([-1, 1], (dim, N))

def testRed(dim, redFac):
    return dim * redFac

def projectedVec(matrix, vector):
    return np.matmul(matrix, vector)

def getSubset(data, size):
  return data.sample(size)


def load_mnist(path, kind='train'):
    import os
    import gzip
    import numpy as np

    """Load MNIST data from `path`"""
    labels_path = os.path.join(path,
                               '%s-labels-idx1-ubyte.gz'
                               % kind)
    images_path = os.path.join(path,
                               '%s-images-idx3-ubyte.gz'
                               % kind)

    with gzip.open(labels_path, 'rb') as lbpath:
        labels = np.frombuffer(lbpath.read(), dtype=np.uint8,
                               offset=8)

    with gzip.open(images_path, 'rb') as imgpath:
        images = np.frombuffer(imgpath.read(), dtype=np.uint8,
                               offset=16).reshape(len(labels), 784)

    return images, labels

def run(data,eps,delta,N):
    distances =[]
    dim = minDimCalc(eps, delta, N)
    dim = dim.astype(int)
    projMat = getProjMat(dim, N)
    for index,vec in data.iterrows():
        projVec = (1/math.sqrt(dim)) * projectedVec(projMat, np.transpose(vec))
        distances.append(projVec)

    data = getOGdis(data)
    sketched = getOGdis(distances)
    assert(len(sketched) == len(data))
    assert(len(sketched[0])== len(data[0]))
    data = pd.DataFrame(data)
    sketched = pd.DataFrame(sketched)
    data.replace(0, np.nan, inplace = True)
    data.loc[:,:] = data.loc[:,:]**2
    sketched.replace(0, np.nan, inplace = True)
    sketched.loc[:,:] = sketched.loc[:,:]**2
    data.loc[:,:] = sketched.loc[:,:].div(data.loc[:,:])
    data = data.iloc[: , 1:]
    data = data.values.flatten()
    data = data[~np.isnan(data)]
    boxplot(data)
    tenth = np.percentile(data,10)
    ninety = np.percentile(data,90)
    mini = min(data)
    maxi = max(data)
    mean = np.mean(data)
    return mini, maxi, tenth, ninety, mean


def boxplot(data):
  box = plt.boxplot(data)
  print(stats.describe(data))
  plt.show()


def load_imagenette_as_dataframe(root_dir):
  transform = transforms.Compose([
      transforms.Resize((224, 224)),
      transforms.ToTensor()
  ])
  dataset = datasets.ImageFolder(root=root_dir, transform=transform)
  image_data = []
  for img, label in dataset:
    img_flat = np.array(img).flatten()
    image_data.append(img_flat)
  df = pd.DataFrame(image_data)
  return df

  start = time.time()
X_train, y_train = load_mnist('/content/fashion', kind='train')

df = pd.DataFrame(X_train)
smalltest = X_train[:3000]
# eps is the reduction factor
# delta is the confidence interval

eps = 0.3
delta = 0.05
setsize = 50
nSubsets = 50
N = df.shape[1]

minim = math.inf
maxim = -math.inf
tenth = math.inf
ninety = -math.inf
mean = 1

for i in range(nSubsets):
  subsetData = getSubset(df, setsize)
  min_val,max_val, tenth_val, ninety_val, mean_val = run(subsetData, eps, delta, N)
  if min_val < minim:
    minim = min_val
  if max_val > maxim:
    maxim = max_val
  if tenth_val < tenth:
    tenth = tenth_val
  if ninety_val > ninety:
    ninety = ninety_val
  mean = mean+mean_val
mean = mean/nSubsets
end = time.time()
print(end - start)
print (minim, maxim, tenth, ninety, mean)
